name: Build and Release

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ created ]
  workflow_dispatch:

env:
  PACKAGE_VERSION: v2.0.0

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Test package import
      run: |
        python -m BiliOpen -v

  build:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            python-version: 3.8
            artifact-name: biliopen-${{ github.ref_name || 'dev' }}-linux-amd64.tar.gz
            build-command: tar -czvf
          - os: ubuntu-latest
            arch: arm64
            python-version: 3.8
            artifact-name: biliopen-${{ github.ref_name || 'dev' }}-linux-arm64.tar.gz
            build-command: tar -czvf
          - os: macos-latest
            arch: x64
            python-version: 3.8
            artifact-name: biliopen-${{ github.ref_name || 'dev' }}-macos-amd64.zip
            build-command: zip -r
          - os: windows-latest
            arch: x64
            python-version: 3.8
            artifact-name: biliopen-${{ github.ref_name || 'dev' }}-windows-amd64.zip
            build-command: 7z a -tzip

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Test application
      run: python -m BiliOpen -v

    - name: Build executable
      run: pyinstaller -F -n BiliOpen -i icon.ico BiliOpen/__main__.py

    - name: Prepare release directory
      shell: bash
      run: |
        mkdir -p release/BiliOpen
        cp dist/* release/BiliOpen/ || true
        cp LICENSE release/BiliOpen/
        cp README.md release/BiliOpen/

    - name: Create archive (Linux/macOS)
      if: matrix.os != 'windows-latest'
      working-directory: release
      run: ${{ matrix.build-command }} ${{ matrix.artifact-name }} BiliOpen

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: release
      run: 7z a -tzip ${{ matrix.artifact-name }} BiliOpen

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4.5.0
      with:
        name: ${{ matrix.artifact-name }}
        path: release/${{ matrix.artifact-name }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    
    - name: Install dependencies first
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install build dependencies
      run: |
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4.3.0
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          */biliopen-*.tar.gz
          */biliopen-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}