name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
    
    - name: Lint with flake8
      run: |
        # 停止构建如果有Python语法错误或未定义的名称
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 对其他问题报告但不阻止构建
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test installation
      run: |
        pip install .
        python -c "import BiliOpen; print(f'BiliOpen version: {BiliOpen.__version__}')"

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check distribution
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        files: |
          dist/*.tar.gz
          dist/*.whl
        body: |
          ## 🚀 Release ${{ steps.get_version.outputs.VERSION }}
          
          ### 📦 安装方式
          ```bash
          pip install BiliOpen==${{ steps.get_version.outputs.VERSION }}
          ```
          
          ### 📥 下载
          - [源码包 (.tar.gz)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/BiliOpen-${{ steps.get_version.outputs.VERSION }}.tar.gz)
          - [Python Wheel (.whl)](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/BiliOpen-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl)
          
          ### 🔗 PyPI
          https://pypi.org/project/BiliOpen/${{ steps.get_version.outputs.VERSION }}/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/
